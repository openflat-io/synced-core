{"version":3,"sources":["../index.ts","../synced.ts","../storage.ts","../tldraw-synced.ts"],"sourcesContent":["export * from \"./synced\"\nexport * from \"./tldraw-synced\"\n","import * as Y from \"yjs\";\nimport { WebsocketProvider } from \"y-websocket\";\n\nimport { Storage } from \"./storage\";\nimport { SyncedStorageState } from \"./type\";\n\nexport * from \"./storage\";\n\nexport class SyncedStorage {\n    private doc: Y.Doc;\n    private provider: WebsocketProvider;\n    private storage: Map<string, Storage<any>> = new Map();\n\n    constructor(private roomId: string, serverUrl: string) {\n        this.doc = new Y.Doc();\n        this.provider = new WebsocketProvider(serverUrl, this.roomId, this.doc);\n        this.provider.connect();\n    }\n\n    connectStorage<T extends SyncedStorageState>(storageId: string, initialState: T): Storage<T> {\n        let storage = this.storage.get(storageId);\n        if (!storage) {\n            storage = new Storage<T>(this.doc, this.roomId, initialState);\n            this.storage.set(storageId, storage);\n        }\n        return storage;\n    }\n\n    get room(): WebsocketProvider {\n        return this.provider;\n    }\n\n    dispose() {\n        this.provider.disconnect();\n        this.doc.destroy();\n    }\n}\n","import * as Y from \"yjs\";\nimport { SyncedStorageState } from \"./type\";\n\nexport enum Events {\n    STATE_CHANGED = \"stateChanged\",\n};\n\nexport class Storage<T extends SyncedStorageState> {\n    private _state: Y.Map<T>;\n    private listeners: { [event: string]: Array<Function> } = {};\n\n    constructor(private doc: Y.Doc, private roomId: string, initialState: T) {\n        this._state = this.doc.getMap(`synced-${this.roomId}`);\n\n        this._state.observe((event: Y.YMapEvent<T>) => {\n            this.handleStateChange(event);\n        });\n\n        if (this._state.size === 0) {\n            this.initializeState(initialState);\n        }\n    }\n\n    get state(): T {\n        return this.getState();\n    }\n\n    initializeState(initialState: T) {\n        Object.entries(initialState).forEach(([key, value]) => {\n            if (!this._state.has(key)) {\n                this._state.set(key, value);\n            }\n        });\n    }\n\n    getState(): T {\n        const stateObj: Partial<T> = {};\n        this._state.forEach((value, key) => {\n            if (value !== undefined) {\n                stateObj[key as keyof T] = value as T[keyof T];\n            }\n        });\n        return stateObj as T;\n    }\n\n    setState(newState: Partial<T>) {\n        Object.entries(newState).forEach(([key, value]) => {\n            if (key) {\n                this._state.set(key, value);\n            }\n        });\n    }\n\n    /**\n     * Delete the given key or given state from the synced storage\n     * @param given keyof T | Partial<T>\n     * @returns void\n     *\n     * @example1 by key\n     * state: { ban: false, id: \"shape:xxxx\"}\n     * given: \"ban\" => state: { id: \"shape:xxxx\" }\n     *\n     * @example2 by state\n     * state = { ban: false, id: \"shape:xxxx\" }\n     * given: { ban: true } => state: { id: \"shape:xxxx\" }\n     */\n    deleteState(given: keyof T | Partial<T>) {\n        if (typeof given === \"string\") {\n            if (!this._state.has(given)) {\n                return;\n            }\n            this._state.delete(given as string);\n        } else {\n            Object.keys(given).forEach(key => {\n                if (!this._state.has(key)) {\n                    return;\n                }\n                this._state.delete(key);\n            });\n        }\n    }\n\n    on(event: string, listener: Function) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event].push(listener);\n\n        return () => {\n            this.listeners[event] = this.listeners[event].filter(l => l !== listener);\n        };\n    }\n\n    off(event: string, listener: Function) {\n        if (this.listeners[event]) {\n            this.listeners[event] = this.listeners[event].filter(l => l !== listener);\n        }\n    }\n\n    private emit(event: string, ...args: any[]) {\n        if (this.listeners[event]) {\n            this.listeners[event].forEach(listener => listener(...args));\n        }\n    }\n\n    private handleStateChange(event: Y.YMapEvent<T>) {\n        const diff: Partial<T> = {};\n\n        event.keysChanged.forEach(key => {\n            const value = this._state.get(key);\n            if (value !== undefined) {\n                diff[key as keyof T] = value as T[keyof T];\n            }\n        });\n\n        this.emit(Events.STATE_CHANGED, diff);\n    }\n}\n","import * as Y from \"yjs\";\nimport { WebsocketProvider } from \"y-websocket\";\nimport { YKeyValue } from \"y-utility/y-keyvalue\";\n\nimport { SyncedStorageState } from \"./type\";\n\nexport type SyncedStorageDiff<T> = {\n    toPut: T[];\n    toRemove: string[];\n};\n\nexport class TlDrawSyncedStorage<T extends SyncedStorageState> {\n    doc: Y.Doc;\n    provider: WebsocketProvider;\n    state: YKeyValue<T>;\n\n    constructor(roomId: string, initialState: T, serverUrl: string) {\n        this.doc = new Y.Doc();\n        this.provider = new WebsocketProvider(serverUrl, roomId, this.doc);\n        const yArray = this.doc.getArray<{ key: string; val: T }>(`synced-${roomId}`);\n        this.state = new YKeyValue(yArray);\n\n        if (this.state.yarray?.length === 0) {\n            this.initializeState(initialState);\n        }\n    }\n\n    get room(): WebsocketProvider {\n        return this.provider;\n    }\n\n    initializeState(initialState: T) {\n        Object.values(initialState).forEach(record => {\n            if (!this.state.has(record.id)) {\n                this.state.set(record.id, record);\n            }\n        });\n    }\n\n    getState(): any[] {\n        return this.state.yarray?.toJSON();\n    }\n\n    deleteState(newState: Partial<T>) {\n        Object.values(newState).forEach(({ id }) => {\n            if (!id) return;\n            this.state.delete(id);\n        });\n    }\n\n    setState(newState: Partial<T>) {\n        Object.values(newState).forEach(record => {\n            if (record.id) {\n                this.state.set(record.id, record);\n            }\n\n            if (record.length > 0) {\n                record.forEach((item: any) => {\n                    this.state.set(item.id, item);\n                });\n            }\n        });\n    }\n\n    onStateChanged(callback: (diff: SyncedStorageDiff<T>, transaction: Y.Transaction) => void) {\n        this.state.on(\n            \"change\",\n            (\n                changes: Map<\n                    string,\n                    | { action: \"delete\"; oldValue: T }\n                    | { action: \"update\"; oldValue: T; newValue: T }\n                    | { action: \"add\"; newValue: T }\n                >,\n                transaction: Y.Transaction,\n            ) => {\n                if (changes?.size) {\n                    const diff: SyncedStorageDiff<T> = {\n                        toPut: [],\n                        toRemove: [],\n                    };\n                    changes.forEach((change, key) => {\n                        switch (change.action) {\n                            case \"add\":\n                            case \"update\": {\n                                const record = this.state.get(key)!;\n                                diff.toPut.push(record);\n                                break;\n                            }\n                            case \"delete\": {\n                                diff.toRemove.push(key);\n                                break;\n                            }\n                        }\n                    });\n                    callback(diff, transaction);\n                }\n            },\n        );\n    }\n\n    onStateOff(callback: (diff: SyncedStorageDiff<T>, transaction: Y.Transaction) => void) {\n        this.state.off(\n            \"change\",\n            (\n                changes: Map<\n                    string,\n                    | { action: \"delete\"; oldValue: T }\n                    | { action: \"update\"; oldValue: T; newValue: T }\n                    | { action: \"add\"; newValue: T }\n                >,\n                transaction: Y.Transaction,\n            ) => {\n                if (changes?.size) {\n                    const diff: SyncedStorageDiff<T> = {\n                        toPut: [],\n                        toRemove: [],\n                    };\n                    changes.forEach((change, key) => {\n                        switch (change.action) {\n                            case \"add\":\n                            case \"update\": {\n                                const record = this.state.get(key)!;\n                                diff.toPut.push(record);\n                                break;\n                            }\n                            case \"delete\": {\n                                diff.toRemove.push(key);\n                                break;\n                            }\n                        }\n                    });\n                    callback(diff, transaction);\n                }\n            },\n        );\n    }\n\n    dispose() {\n        this.provider.disconnect();\n        this.doc.destroy();\n    }\n}"],"mappings":"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","names":["Events","Y","import_y_websocket"]}